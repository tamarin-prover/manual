theory auth_signing_simple
begin

builtins: asymmetric-encryption

/* We formalize the following protocol:

    1. A -> B: {A,na}pk(B)

*/

// Public key infrastructure
rule Register_pk:
  [ Fr(~ltkE) ]
  -->
  [ !Ltk($E, ~ltkE)
  , !Pk($E, pk(~ltkE))
  , Out(pk(~ltkE)) 
  ] 

// Role A sends first message
rule A_1_send:
  let m = <$A, ~na>
  in 
  [ Fr(~na)
  , !Ltk($A, ltkA)
  , !Pk($B, pkB)
  ]
--[ Send($A, m) 
  ]->
  [ St_A_1($A, ltkA, pkB, $B, ~na) 
  , Out(aenc(m,pkB))
  ]

// Role B receives first message
rule B_1_receive:
  let m = <$A, na>
  in
  [ !Ltk($B, ltkB)
  , !Pk($B, pkB)
  , In(aenc(m,pkB))
  ]
--[ Recv($B, m)
  , Authentic($A,m), Honest($B), Honest($A)
  ]->
  [ St_B_1($B, ltkB, $A, m)
  ]

lemma executable:
  exists-trace
    "Ex A B m #i #j. Send(A,m)@i & Recv(B,m) @j"

lemma message_authentication: 
    "All b m #i. Authentic(b,m) @i
     ==> (Ex #j. Send(b,m) @j & j<i)"

end
